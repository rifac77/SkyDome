{"version":3,"file":"computePressure.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/computePressure.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,iBAAiB,CAAC;AAEtD;;GAEG;AACH,MAAM,OAAO,8BAA8B;IAEvC;;;;OAIG;IACH,YAAY,QAAgD,EAAE,UAAsC;QAChG,IAAI,8BAA8B,CAAC,WAAW,EAAE;YAC5C,IAAI,CAAC,SAAS,GAAG,IAAU,MAAO,CAAC,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;SACpF;IACL,CAAC;IAED;;OAEG;IACI,MAAM,KAAK,WAAW;QACzB,OAAO,mBAAmB,EAAE,IAAI,yBAAyB,IAAI,MAAM,IAAU,MAAO,CAAC,uBAAuB,EAAE,gBAAgB,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;IACpJ,CAAC;IAED;;;OAGG;IACH,OAAO,CAAC,MAA8B;QAClC,IAAI,CAAC,SAAS,EAAE,OAAO;YACnB,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE;gBACvC,eAAe;YACnB,CAAC,CAAC,CAAC;IACX,CAAC;IAED;;;OAGG;IACH,SAAS,CAAC,MAA8B;QACpC,IAAI;YACA,IAAI,CAAC,SAAS,EAAE,SAAS,IAAI,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;SAClE;QAAC,MAAM;YACJ,eAAe;SAClB;IACL,CAAC;CACJ","sourcesContent":["import { IsWindowObjectExist } from \"./domManagement\";\r\n\r\n/**\r\n * A wrapper for the experimental compute pressure api which allows a callback to be called whenever certain thresholds are met.\r\n */\r\nexport class ComputePressureObserverWrapper {\r\n    private _observer: any;\r\n    /**\r\n     * A compute pressure observer will call this callback, whenever these thresholds are met.\r\n     * @param callback The callback that is called whenever thresholds are met.\r\n     * @param thresholds An object containing the thresholds used to decide what value to to return for each update property (average of start and end of a threshold boundary).\r\n     */\r\n    constructor(callback: (update: IComputePressureData) => void, thresholds: IComputePressureThresholds) {\r\n        if (ComputePressureObserverWrapper.IsAvailable) {\r\n            this._observer = new (<any>window).ComputePressureObserver(callback, thresholds);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if ComputePressureObserver is available for use, false otherwise.\r\n     */\r\n    public static get IsAvailable() {\r\n        return IsWindowObjectExist() && \"ComputePressureObserver\" in window && (<any>window).ComputePressureObserver?.supportedSources?.includes(\"cpu\");\r\n    }\r\n\r\n    /**\r\n     * Method that must be called to begin observing changes, and triggering callbacks.\r\n     * @param source defines the source to observe\r\n     */\r\n    observe(source: IComputePressureSource): void {\r\n        this._observer?.observe &&\r\n            this._observer?.observe(source).catch(() => {\r\n                // Ignore error\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Method that must be called to stop observing changes and triggering callbacks (cleanup function).\r\n     * @param source defines the source to unobserve\r\n     */\r\n    unobserve(source: IComputePressureSource): void {\r\n        try {\r\n            this._observer?.unobserve && this._observer?.unobserve(source);\r\n        } catch {\r\n            // Ignore error\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * An interface defining the shape of the thresholds parameter in the experimental compute pressure api\r\n */\r\nexport interface IComputePressureThresholds {\r\n    /**\r\n     * Thresholds to make buckets out of for the cpu utilization, the average between the start and end points of a threshold will be returned to the callback.\r\n     */\r\n    cpuUtilizationThresholds: number[];\r\n    /**\r\n     * Thresholds to make buckets out of for the cpu speed, the average between the start and end points of a threshold will be returned to the callback.\r\n     * 0.5 represents base speed.\r\n     */\r\n    cpuSpeedThresholds: number[];\r\n}\r\n\r\n/**\r\n * An interface defining the shape of the data sent to the callback in the compute pressure observer.\r\n */\r\nexport interface IComputePressureData {\r\n    /**\r\n     * The cpu utilization which will be a number between 0.0 and 1.0.\r\n     */\r\n    cpuUtilization: number;\r\n    /**\r\n     * The cpu speed which will be a number between 0.0 and 1.0.\r\n     */\r\n    cpuSpeed: number;\r\n}\r\n\r\n/**\r\n * The possible sources for the compute pressure observer.\r\n */\r\nexport type IComputePressureSource = \"cpu\";\r\n"]}