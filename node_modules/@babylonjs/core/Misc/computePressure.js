import { IsWindowObjectExist } from "./domManagement.js";
/**
 * A wrapper for the experimental compute pressure api which allows a callback to be called whenever certain thresholds are met.
 */
export class ComputePressureObserverWrapper {
    /**
     * A compute pressure observer will call this callback, whenever these thresholds are met.
     * @param callback The callback that is called whenever thresholds are met.
     * @param thresholds An object containing the thresholds used to decide what value to to return for each update property (average of start and end of a threshold boundary).
     */
    constructor(callback, thresholds) {
        if (ComputePressureObserverWrapper.IsAvailable) {
            this._observer = new window.ComputePressureObserver(callback, thresholds);
        }
    }
    /**
     * Returns true if ComputePressureObserver is available for use, false otherwise.
     */
    static get IsAvailable() {
        return IsWindowObjectExist() && "ComputePressureObserver" in window && window.ComputePressureObserver?.supportedSources?.includes("cpu");
    }
    /**
     * Method that must be called to begin observing changes, and triggering callbacks.
     * @param source defines the source to observe
     */
    observe(source) {
        this._observer?.observe &&
            this._observer?.observe(source).catch(() => {
                // Ignore error
            });
    }
    /**
     * Method that must be called to stop observing changes and triggering callbacks (cleanup function).
     * @param source defines the source to unobserve
     */
    unobserve(source) {
        try {
            this._observer?.unobserve && this._observer?.unobserve(source);
        }
        catch {
            // Ignore error
        }
    }
}
//# sourceMappingURL=computePressure.js.map